{"version":3,"sources":["components/PageTemplate/PageTemplate.js","components/TodoInput/TodoInput.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/App.js","serviceWorker.js","index.js"],"names":["cx","classNames","bind","styles","PageTemplate","_ref","children","react_default","a","createElement","className","TodoInput","value","onChange","onInsert","onKeyPress","e","key","onClick","TodoItem","_this$props","this","props","done","onToggle","onRemove","type","checked","readOnly","stopPropagation","Component","TodoList","todos","todoList","map","todo","components_TodoItem_TodoItem","id","text","App","state","input","getId","_this","handleChange","target","setState","handleInsert","_this$state","newTodo","concat","Object","toConsumableArray","iput","handleToggle","index","findIndex","toggleId","objectSpread","slice","length","handleRemove","_this$state2","components_PageTemplate_PageTemplate","components_TodoInput_TodoInput","components_TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f99a81e.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './PageTemplate.scss'\r\nimport classNames from 'classnames/bind'\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst PageTemplate = ({ children }) => {\r\n    return (\r\n        <div className={cx('page-template')}>\r\n            <h1>일정관리</h1>\r\n            <div className={cx('content')}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageTemplate;","import React from 'react';\r\nimport styles from './TodoInput.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst TodoInput = ({value, onChange, onInsert}) => {\r\n    const handleKeyPress = (e) => {\r\n        if(e.key === 'Enter') {\r\n            onInsert();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={cx('todo-input')}>\r\n            <input onChange={onChange} value={value} onKeyPress={handleKeyPress}/>\r\n            <div className={cx('add-button')} onClick={onInsert}>추가</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoInput;","import React, { Component } from 'react';\r\nimport styles from './TodoItem.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass TodoItem extends Component {\r\n    render() {\r\n        const {done, children, onToggle, onRemove} = this.props;\r\n\r\n        return (\r\n            <div className={cx('todo-item')} onClick={onToggle}>\r\n                <input className={cx('tick')} type=\"checkbox\" checked={done} readOnly/>\r\n                <div className={cx('text', {done})}>{children}</div>\r\n                <div className={cx('delete')} onClick={(e) => {\r\n                    onRemove();\r\n                    e.stopPropagation();\r\n                }\r\n            }>[지우기]</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from '../TodoItem';\r\n\r\nclass TodoList extends Component {\r\n    render() {\r\n        const { todos, onToggle, onRemove} = this.props;\r\n        const todoList = todos.map(\r\n            todo => (\r\n                <TodoItem\r\n                    key={todo.id}\r\n                    done={todo.done}\r\n                    onToggle={() => onToggle(todo.id)}\r\n                    onRemove={() => onRemove(todo.id)}>\r\n                    {todo.text}\r\n                </TodoItem>\r\n            )\r\n        );\r\n        return (\r\n            <div>\r\n                {todoList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from 'react';\r\nimport PageTemplate from './PageTemplate';\r\nimport TodoInput from './TodoInput';\r\nimport TodoList from './TodoList';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        input: '',\r\n        todos: [\r\n            {id:0, text:'컴포넌트 스타일링0', done:true},\r\n            {id:1, text:'컴포넌트 스타일링1', done:false},\r\n            {id:2, text:'컴포넌트 스타일링2', done:false},\r\n            {id:3, text:'컴포넌트 스타일링3', done:false},\r\n            {id:4, text:'컴포넌트 스타일링4', done:false},\r\n            {id:5, text:'컴포넌트 스타일링5', done:false},\r\n            {id:6, text:'컴포넌트 스타일링6', done:false},\r\n            {id:7, text:'컴포넌트 스타일링7', done:false},\r\n        ]\r\n    }\r\n\r\n    id = 1\r\n    getId = () => {\r\n        return ++this.id;\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {value} = e.target;\r\n        this.setState({\r\n            input:value\r\n        });\r\n    }\r\n\r\n    handleInsert = () => {\r\n        const {todos, input} = this.state;\r\n        const newTodo = {\r\n            id: this.getId(),\r\n            done: false,\r\n            text: input\r\n        };\r\n\r\n        this.setState({\r\n            todos: [...todos, newTodo],\r\n            iput: ''\r\n        });\r\n    }\r\n\r\n    handleToggle = (id) => {\r\n        const {todos} = this.state;\r\n        const index = todos.findIndex(todo => todo.id === id)\r\n\r\n        const toggleId = {\r\n            ...todos[index],\r\n            done: !todos[index].done\r\n        };\r\n\r\n        //slice를 사용하여 우리가 찾은 index 전후의 데이터들을 복사\r\n        // 그리고 사이에는 변경된 to 객체를 넣어줌\r\n        this.setState({\r\n            todos: [\r\n            ...todos.slice(0, index),\r\n            toggleId,\r\n            ...todos.slice(index + 1, todos.length)\r\n            ]\r\n        });\r\n    }\r\n\r\n    handleRemove = (id) => {\r\n        const{ todos } = this.state;\r\n        const index = todos.findIndex(todo => todo.id === id)\r\n\r\n        this.setState({\r\n            todos:[\r\n            ...todos.slice(0, index),\r\n            ...todos.slice(index + 1, todos.length)\r\n            ]\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const{input, todos} = this.state;\r\n        const{\r\n            handleChange,\r\n            handleInsert,\r\n            handleToggle,\r\n            handleRemove\r\n        } = this;\r\n        \r\n        return (\r\n            <PageTemplate>\r\n                <TodoInput onChange={handleChange} onInsert={handleInsert} value={input}/>\r\n                <TodoList todos={todos} onToggle={handleToggle} onRemove={handleRemove} />\r\n            </PageTemplate>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/mian.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}